# Ανάκτηση Δεδομένων Paypal από το Yahoo Finance

import yfinance as yf

# Κατεβάζουμε τα δεδομένα της μετοχής της PayPal από το 2020 έως το 2025

paypal = yf.download('PYPL', start = '2020-01-01', end = '2025-01-01', auto_adjust=False)


# Προβολή των πρώτων 5 γραμμών

print(paypal.head())

# Καθαρισμός Δεδομένων

# Έλεγχος για κενές τιμές και αν υπάρχουν προχωράμε στην αντικατάσταση τους

print(paypal.isnull().sum())

paypal = paypal.dropna()

# Περιγραφική στατιστική των δεδομένων (για τις βασικές στήλες)

print(paypal.describe())


# Οπτικοπίηση των δεδομένων

# Γραφική απεικόνηση (Close Price)

import matplotlib.pyplot as plt

paypal['Close'].plot(figsize=(12,6), title='Εξέλιξη τιμής μετοχής PayPal (2020-2025)')
plt.xlabel('Ημερομηνία')
plt.ylabel('Τιμή ($)')
plt.grid()
plt.show()

# Κινητός Μέσος όρος 50 ημερών

paypal['MA50'] = paypal['Close'].rolling(window=50).mean()
paypal[['Close', 'MA50']].plot(figsize=(12, 6), title='Κινητός Μέσος όρος 50 ημερών')
plt.grid()
plt.show()

# Όγκος Συναλλαγών

paypal['Volume'].plot(kind='bar', figsize=(12,4), title='Όγκος Συναλλαγών PayPal', alpha = 0.5)
plt.tight_layout()
plt.show()

# Συσχέτιση Μεταβλητών

import seaborn as sns

corr_matrix = paypal[['Open', 'High', 'Low', 'Close', 'Volume']].corr()

# Οπτικοπίηση 

plt.figure(figsize=(8,6))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
plt.title('Πίνακας Συσχέτισης Δειτών Μετοχής PayPal')
plt.show()

# Ανάλυση Μεταβλητότητας (Volatility)

paypal['Volatility'] = paypal['Close'].rolling(window=30).std()

paypal[['Close', 'Volatility']].plot(subplots=True, figsize=(12, 6), title=['Τιμή Κλεισίματος', '30ήμερη Μεταβλητότητα'])
plt.tight_layout()
plt.show()

# Candlestck Γράφημα

import mplfinance as mpf

mpf.plot(paypal[-60:], type='candle', volume=True, title='Candlestick Γράφημα PayPal - Τελευταίες 60 Ημέρες')


# Αναγνώριση Τάσεων με Moving Averages

paypal['MA20'] = paypal['Close'].rolling(window=20).mean()
paypal['MA100'] = paypal['Close'].rolling(window=100).mean()

paypal[['Close', 'MA20', 'MA100']].plot(figsize=(12, 6), title='PayPal - MA20 και ΜΑ100')
plt.grid()
plt.show()

# Ανάλυση Απόδοσης

paypal['Daily Return'] = paypal['Close'].pct_change()

paypal['Daily Return'].plot(kind='hist', bins=100, figsize=(10, 4), title='Ιστορική Απόδοση Ημερήσιας Μεταβολής (%)')
plt.grid()
plt.show()


# Προετοιμασία των Δεδομένων

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import numpy as np

# Δημιουργία νέας μεταβλητής για πρόβλεψη επόμενης μέρας

paypal['Target'] = paypal['Close'].shift(-1)

X = paypal[['Close']][:-1]
y = paypal['Target'][:-1]

# Εκπαιδεύουμε το μοντέλο μας

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Δοκιμάζουμε το μοντέλο 

model = LinearRegression()
model.fit(X_train, y_train)

# Προβλέπουμε

predictions = model.predict(X_test)

# Οπτικοποίηση Αποτελεσμάτων

plt.figure(figsize=(12, 6))
plt.plot(y_test.values, label='Πραγματικές Τιμές')
plt.plot(predictions, label='Προβλέψεις', linestyle='--')
plt.legend()
plt.title('Πρόβλεψη Τιμής Κλεισίματος - PayPal')
plt.grid()
plt.show()

# Αξιολόγηση Απόδοσης

from sklearn.metrics import mean_squared_error, r2_score

mse = mean_squared_error(y_test, predictions)
r2 = r2_score(y_test, predictions)

print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

# Classification

paypal['Direction'] = (paypal['Target'] > paypal['Close']).astype(int)

X = paypal[['Close']][:-1]
y = paypal['Direction'][:-1]